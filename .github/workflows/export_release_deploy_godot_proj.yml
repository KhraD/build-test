name: "Export Release and Deploy Godot Project"
on: 
  workflow_dispatch:
  push:
    branches:
      - 'release'

env:
  GODOT_VERSION: 4.4
  EXPORT_NAME: build-test
  ITCH_USER: khrad
jobs:
  pass-var:
    name: Pass Variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
      - name: Pass Godot Version
        id: pass-version
        run: echo "godot-version=${GODOT_VERSION}" >> $GITHUB_OUTPUT
      - name: Pass Platforms
        id: pass-platforms
        run: |
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          platforms=$(grep "platform=" export_presets.cfg | sed -zr 's@(platform="| )@.@g;s@"\n@@g')
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
      - name: Pass is Dotnet
        id: pass-is-dotnet
        run: |
          is_dotnet=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "dotnet") || true;
          is_dotnet=$([ -n "$is_dotnet" ] && echo true) || true;
          echo "is-dotnet=$is_dotnet" >> $GITHUB_OUTPUT
      - name: Pass has Extension
        id: pass-has-extension
        run: |
          has_extension=$(find . -name "godot-cpp") || true;
          has_extension=$([ -n "$has_extension" ] && echo true) || true;
          echo "has-extension=$has_extension" >> $GITHUB_OUTPUT
    outputs:
      godot-version: ${{ steps.pass-version.outputs.godot-version }}
      platforms: ${{ steps.pass-platforms.outputs.platforms }}
      is-dotnet: ${{ steps.pass-is-dotnet.outputs.is-dotnet }}
      has-extension: ${{ steps.pass-has-extension.outputs.has-extension }}
      
  export-windows:
    name: Windows Export
    runs-on: ubuntu-latest
    needs: [pass-var]
    if: contains(needs.pass-var.outputs.platforms, 'Windows')
    container:
      image: ghcr.io/khrad/godot-builder:${{ needs.pass-var.outputs.godot-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true 
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates ~/.local/share/godot/export_templates
      - name: Set Dotnet
        if: ${{ needs.pass-var.outputs.is-dotnet == 'true' }}
        run: |
          echo "2" | update-alternatives --config godot >> /dev/null
      - name: Restore Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        continue-on-error: true   
      - name: Build GDExtensions
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        run: |
          scons platform=windows target=template_release verbose=yes use_mingw=yes use_llvm=yes lto=full mingw_prefix=/opt/llvm-mingw/current
      - name: Save Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-save
        continue-on-error: true
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          EXPORT_DIR="$(readlink -f build)"
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          godot --headless --verbose --export-release "Windows Desktop" "$EXPORT_DIR/windows/${EXPORT_NAME}.exe"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: build/windows
      - name: Upload to itch.io
        run: |
          version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          EXPORT_DIR="$(readlink -f build)"
          butler push $EXPORT_DIR/windows ${ITCH_USER}/${EXPORT_NAME}:windows --userversion ${version}
          butler status ${ITCH_USER}/${EXPORT_NAME}:windows
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}

  export-linux:
    name: Linux Export
    runs-on: ubuntu-latest
    needs: [pass-var]
    if: contains(needs.pass-var.outputs.platforms, 'Linux')
    container:
      image: ghcr.io/khrad/godot-builder:${{needs.pass-var.outputs.godot-version}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true 
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates ~/.local/share/godot/export_templates
      - name: Set Dotnet
        if: ${{ needs.pass-var.outputs.is-dotnet == 'true' }}
        run: |
          echo "2" | update-alternatives --config godot >> /dev/null
      - name: Restore Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        continue-on-error: true   
      - name: Build GDExtensions
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        run: |
          scons platform=linux target=template_release verbose=yes use_llvm=yes lto=full
      - name: Save Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-save
        continue-on-error: true
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          EXPORT_DIR="$(readlink -f build)"
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          godot --headless --verbose --export-release "Linux" "$EXPORT_DIR/linux/${EXPORT_NAME}.x86_64"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: build/linux
      - name: Upload to itch.io
        run: |
          version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          EXPORT_DIR="$(readlink -f build)"
          butler push $EXPORT_DIR/linux ${ITCH_USER}/${EXPORT_NAME}:linux --userversion ${version}
          butler status ${ITCH_USER}/${EXPORT_NAME}:linux
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
          
  export-web:
    name: Web Export
    runs-on: ubuntu-latest
    needs: [pass-var]
    if: ${{ contains(needs.pass-var.outputs.platforms, 'Web' ) && needs.pass-var.outputs.is-dotnet != 'true' }}
    container:
      image: ghcr.io/khrad/godot-builder:${{needs.pass-var.outputs.godot-version}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true 
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates ~/.local/share/godot/export_templates
      - name: Set Dotnet
        if: ${{ needs.pass-var.outputs.is-dotnet == 'true' }}
        run: |
          echo "2" | update-alternatives --config godot >> /dev/null
      - name: Restore Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        continue-on-error: true   
      - name: Build GDExtensions
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        run: |
          scons platform=web target=template_release verbose=yes lto=full
      - name: Save Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-save
        continue-on-error: true
      - name: Web Build
        run: |
          mkdir -v -p build/web
          EXPORT_DIR="$(readlink -f build)"
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          godot --headless --verbose --export-release "Web" "$EXPORT_DIR/web/${EXPORT_NAME}.html"
      - name: Upload Artifact        
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: build/web
      - name: Upload to itch.io        
        run: |
          version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          EXPORT_DIR="$(readlink -f build)"
          cd $EXPORT_DIR/web
          cp $EXPORT_DIR/web/${EXPORT_NAME}.html $EXPORT_DIR/web/index.html
          butler push $EXPORT_DIR/web ${ITCH_USER}/${EXPORT_NAME}:Html5 --userversion ${version}
          butler status ${ITCH_USER}/${EXPORT_NAME}:Html5
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
      - name: Install rsync ðŸ“š        
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages ðŸš€        
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.

  export-mac:
    name: Mac Export
    runs-on: ubuntu-latest
    needs: [pass-var]
#    if: contains(needs.pass-var.outputs.platforms, 'macOS')
    if: false # currently disabled
    container:
      image: ghcr.io/khrad/godot-builder:${{needs.pass-var.outputs.godot-version}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot
          mv /root/.local/share/godot/export_templates ~/.local/share/godot/export_templates
          
          isDotnet=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | { grep "dotnet" || true; })          
          if [ -n "$isDotnet" ]; then
              echo "2" | update-alternatives --config godot >> /dev/null
          fi
          
          hasExtension=$(find . -name "godot-cpp")
          if [ -n "$hasExtension" ]; then
              scons platform=linux target=template_release 
          fi
      - name: Mac Build
        run: |
          mkdir -v -p build/mac
          EXPORT_DIR="$(readlink -f build)"
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          
          hasEtcConfig=$(cat project.godot | { grep "import_etc2_astc" || true; })
          if [ -n "$hasEtcConfig" ]; then
              sed 's@textures/vram_compression/import_etc2_astc=".*"@textures/vram_compression/import_etc2_astc=true@g' -i project.godot
          else
              sed 's@\[rendering\]@\[rendering\]\ntextures/vram_compression/import_etc2_astc=true@g' -i project.godot
          fi
          
          godot --headless --verbose --export-release "macOS" "$EXPORT_DIR/mac/${EXPORT_NAME}.zip"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: build/mac
      - name: Upload to itch.io
        run: |
          version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          EXPORT_DIR="$(readlink -f build)"
          butler push $EXPORT_DIR/mac ${ITCH_USER}/${EXPORT_NAME}:mac --userversion ${version}
          butler status ${ITCH_USER}/${EXPORT_NAME}:mac
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
  export-android:
    name: Android Export
    runs-on: ubuntu-latest
    needs: [pass-var]
    if: contains(needs.pass-var.outputs.platforms, 'Android')
    container:
      image: ghcr.io/khrad/godot-builder:${{needs.pass-var.outputs.godot-version}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true 
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates ~/.local/share/godot/export_templates
      - name: Set Dotnet
        if: ${{ needs.pass-var.outputs.is-dotnet == 'true' }}
        run: |
          echo "2" | update-alternatives --config godot >> /dev/null
          ln -nsf /opt/godot/mono/gradle /opt/godot/gradle
      - name: Restore Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        continue-on-error: true   
      - name: Build GDExtensions
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        run: |
          scons platform=android target=template_release verbose=yes lto=full
      - name: Save Godot build cache
        if: ${{ needs.pass-var.outputs.has-extension == 'true' }}
        uses: ./godot-cpp/.github/actions/godot-cache-save
        continue-on-error: true      
      - name: Android Build
        run: |
          echo ${{ secrets.SECRET_RELEASE_KEYSTORE_BASE64 }} | base64 --decode > /opt/godot/release.keystore
          export GODOT_ANDROID_KEYSTORE_RELEASE_PATH=/opt/godot/release.keystore
          export GODOT_ANDROID_KEYSTORE_RELEASE_USER=${{ secrets.SECRET_RELEASE_KEYSTORE_USER }}
          export GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD=${{ secrets.SECRET_RELEASE_KEYSTORE_PASSWORD }}
          mkdir -v -p build/android
          EXPORT_DIR="$(readlink -f build)"
          cd $(find . -name "project.godot" | grep -v "godot.cpp" | xargs dirname)
          sed 's@gradle_build/use_gradle_build=.*@gradle_build/use_gradle_build=true@g' -i export_presets.cfg
          sed 's@gradle_build/gradle_build_directory=.*@gradle_build/gradle_build_directory="/opt/godot/gradle"@g' -i export_presets.cfg
          sed 's@gradle_build/export_format=.*@gradle_build/export_format=1@g' -i export_presets.cfg
          
          hasEtcConfig=$(cat project.godot | { grep "import_etc2_astc" || true; })
          if [ -n "$hasEtcConfig" ]; then
              sed 's@textures/vram_compression/import_etc2_astc=".*"@textures/vram_compression/import_etc2_astc=true@g' -i project.godot
          else
              sed 's@\[rendering\]@\[rendering\]\ntextures/vram_compression/import_etc2_astc=true@g' -i project.godot
          fi
          
          godot --headless --verbose --export-release "Android" "$EXPORT_DIR/android/${EXPORT_NAME}.aab"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: build/android
      - name: Upload to itch.io
        run: |
          version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          EXPORT_DIR="$(readlink -f build)"
          butler push $EXPORT_DIR/android ${ITCH_USER}/${EXPORT_NAME}:android --userversion ${version}
          butler status ${ITCH_USER}/${EXPORT_NAME}:android
        env:
          BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
  tag-release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: [export-windows,export-linux,export-web,export-mac,export-android]
    if: ${{ !cancelled() && !failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Tag
        run: |
          export release_version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          export tag_name=v${release_version}-${{ github.head_ref || github.ref_name }}
          git tag $tag_name ${{ github.head_ref || github.ref_name }}
          git push origin $tag_name
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [tag-release]
    if: ${{ !cancelled() && !failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        id: setup
        run: |
          git pull --all
          export release_version=$(find . -name "project.godot" | grep -v "godot-cpp" | xargs cat | grep "config/version" | cut -d '"' -f 2)
          export tag_name=v${release_version}-${{ github.head_ref || github.ref_name }}
          git checkout $tag_name
          diff --changed-group-format='%>' --unchanged-group-format='' <( git show HEAD~1:CHANGELOG.md ) CHANGELOG.md > RELEASE_NOTES.md || true
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      - name: Zip Files
        run: |
          mkdir releases
          [ -a windows ] && zip -r releases/windows windows || true
          [ -a linux ] && zip -r releases/linux linux || true
          [ -a mac ] && zip -r releases/mac mac || true
          [ -a web ] && zip -r releases/web web || true
          [ -a android ] && zip -r releases/android android || true
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: Initial Release
          body_path: RELEASE_NOTES.md
          generate_release_notes: true
          append_body: true
          make_latest: true
          fail_on_unmatched_files: false
          tag_name: ${{ steps.setup.outputs.tag_name }}
          files: |
            releases/windows.zip
            releases/linux.zip
            releases/mac.zip
            releases/web.zip
            releases/android.zip